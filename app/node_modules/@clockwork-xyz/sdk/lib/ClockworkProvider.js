"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor = __importStar(require("@coral-xyz/anchor"));
const web3_js_1 = require("@solana/web3.js");
const idl_json_1 = __importDefault(require("./programs/thread/idl.json"));
const utils_1 = require("./utils");
class ClockworkProvider {
    constructor(wallet, connection, opts = anchor.AnchorProvider.defaultOptions()) {
        this.anchorProvider = new anchor.AnchorProvider(connection, wallet, opts);
        this.threadProgram = new anchor.Program(idl_json_1.default, idl_json_1.default.metadata.address, this.anchorProvider);
    }
    /**
     * Build a ClockworkProvider from an AnchorProvider
     *
     * @param authority thread authority
     */
    static fromAnchorProvider(provider) {
        const clockworkProvider = new ClockworkProvider(provider.wallet, provider.connection, provider.opts);
        return clockworkProvider;
    }
    /**
     * Get Thread PDA. Returns the public key and bump.
     *
     * @param authority thread authority
     * @param id thread id
     */
    getThreadPDA(authority, id) {
        return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("thread"), authority.toBuffer(), Buffer.from(id)], this.threadProgram.programId);
    }
    /**
     * Get Thread Account Data Deserialized.
     *
     * @param threadPubkey thread public key
     */
    getThreadAccount(threadPubkey) {
        return __awaiter(this, void 0, void 0, function* () {
            const threadAccount = yield this.threadProgram.account.thread.fetch(threadPubkey);
            return threadAccount;
        });
    }
    /**
     * Create a new thread.
     *
     * @param authority thread authority
     * @param id thread id
     * @param instructions thread instructions
     * @param trigger thread trigger
     * @param amount amount to transfer to the thread in lamports (default 0)
     */
    threadCreate(authority, id, instructions, trigger, amount = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            const threadPubkey = this.getThreadPDA(authority, id.toString())[0];
            return yield this.threadProgram.methods
                .threadCreate(new anchor.BN(amount), Buffer.from(id), 
            // TODO: parsing can be removed accounts => keys
            (0, utils_1.parseTransactionInstructions)(instructions), trigger)
                .accounts({
                authority: authority,
                payer: authority,
                systemProgram: anchor.web3.SystemProgram.programId,
                thread: threadPubkey,
            })
                .instruction();
        });
    }
    /**
     * Delete a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to delete.
     * @param closeTo The address to return the data rent lamports to (default payer).
     */
    threadDelete(authority, threadPubkey, closeTo = this.threadProgram.provider.publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods
                .threadDelete()
                .accounts({
                authority: authority,
                thread: threadPubkey,
                closeTo,
            })
                .instruction();
        });
    }
    /**
     * Pause a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to pause.
     */
    threadPause(authority, threadPubkey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods
                .threadPause()
                .accounts({
                authority: authority,
                thread: threadPubkey,
            })
                .instruction();
        });
    }
    /**
     * Resume a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to resume.
     */
    threadResume(authority, threadPubkey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods
                .threadResume()
                .accounts({
                authority: authority,
                thread: threadPubkey,
            })
                .instruction();
        });
    }
    /**
     * Reset a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to reset.
     */
    threadReset(authority, threadPubkey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods
                .threadReset()
                .accounts({
                authority: authority,
                thread: threadPubkey,
            })
                .instruction();
        });
    }
    /**
     * Withdraw from thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to withdraw from.
     * @param payTo The account to withdraw lamports to (default payer)
     */
    threadWithdraw(authority, threadPubkey, amount, payTo = this.threadProgram.provider.publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods
                .threadWithdraw(new anchor.BN(amount))
                .accounts({
                authority: authority,
                thread: threadPubkey,
                payTo,
            })
                .instruction();
        });
    }
    /**
     * Update a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to update.
     * @param settings new thread settings.
     */
    threadUpdate(authority, threadPubkey, settings) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods
                .threadUpdate((0, utils_1.parseThreadSettingsInput)(settings))
                .accounts({
                authority: authority,
                thread: threadPubkey,
            })
                .instruction();
        });
    }
    /**
     * Add instruction to a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to add instruction to.
     * @param instructions instructions to add.
     */
    threadInstructionAdd(authority, threadPubkey, instruction) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods
                .threadInstructionAdd((0, utils_1.parseTransactionInstruction)(instruction))
                .accounts({
                authority: authority,
                thread: threadPubkey,
            })
                .instruction();
        });
    }
    /**
     * Remove an instruction from a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to remove instruction from.
     * @param index instruction index to be removed.
     */
    threadInstructionRemove(authority, threadPubkey, index) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods
                .threadInstructionRemove(new anchor.BN(index))
                .accounts({
                authority: authority,
                thread: threadPubkey,
            })
                .instruction();
        });
    }
    /**
     * Get Crate Info.
     *
     */
    getCrateInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.threadProgram.methods.getCrateInfo().accounts({}).instruction();
        });
    }
}
exports.default = ClockworkProvider;

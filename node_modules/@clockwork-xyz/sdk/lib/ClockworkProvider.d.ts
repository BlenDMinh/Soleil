import * as anchor from "@coral-xyz/anchor";
import { ConfirmOptions, Connection, PublicKey, Transaction, TransactionInstruction } from "@solana/web3.js";
import { ThreadProgram } from "./programs/thread/types";
import { Thread } from "./accounts";
import { ThreadSettingsInput, TriggerInput } from "./models";
/**
 * Wallet interface for objects that can be used to sign provider transactions.
 */
export interface ClockworkProviderWallet {
    signTransaction(tx: Transaction): Promise<Transaction>;
    signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;
    publicKey: PublicKey;
}
declare class ClockworkProvider {
    threadProgram: anchor.Program<ThreadProgram>;
    anchorProvider: anchor.AnchorProvider;
    constructor(wallet: ClockworkProviderWallet, connection: Connection, opts?: ConfirmOptions);
    /**
     * Build a ClockworkProvider from an AnchorProvider
     *
     * @param authority thread authority
     */
    static fromAnchorProvider(provider: anchor.AnchorProvider): ClockworkProvider;
    /**
     * Get Thread PDA. Returns the public key and bump.
     *
     * @param authority thread authority
     * @param id thread id
     */
    getThreadPDA(authority: PublicKey, id: string): [PublicKey, number];
    /**
     * Get Thread Account Data Deserialized.
     *
     * @param threadPubkey thread public key
     */
    getThreadAccount(threadPubkey: PublicKey): Promise<Thread>;
    /**
     * Create a new thread.
     *
     * @param authority thread authority
     * @param id thread id
     * @param instructions thread instructions
     * @param trigger thread trigger
     * @param amount amount to transfer to the thread in lamports (default 0)
     */
    threadCreate(authority: PublicKey, id: string, instructions: TransactionInstruction[], trigger: TriggerInput, amount?: number): Promise<TransactionInstruction>;
    /**
     * Delete a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to delete.
     * @param closeTo The address to return the data rent lamports to (default payer).
     */
    threadDelete(authority: PublicKey, threadPubkey: PublicKey, closeTo?: PublicKey): Promise<TransactionInstruction>;
    /**
     * Pause a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to pause.
     */
    threadPause(authority: PublicKey, threadPubkey: PublicKey): Promise<TransactionInstruction>;
    /**
     * Resume a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to resume.
     */
    threadResume(authority: PublicKey, threadPubkey: PublicKey): Promise<TransactionInstruction>;
    /**
     * Reset a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to reset.
     */
    threadReset(authority: PublicKey, threadPubkey: PublicKey): Promise<TransactionInstruction>;
    /**
     * Withdraw from thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to withdraw from.
     * @param payTo The account to withdraw lamports to (default payer)
     */
    threadWithdraw(authority: PublicKey, threadPubkey: PublicKey, amount: number, payTo?: PublicKey): Promise<TransactionInstruction>;
    /**
     * Update a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to update.
     * @param settings new thread settings.
     */
    threadUpdate(authority: PublicKey, threadPubkey: PublicKey, settings: ThreadSettingsInput): Promise<TransactionInstruction>;
    /**
     * Add instruction to a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to add instruction to.
     * @param instructions instructions to add.
     */
    threadInstructionAdd(authority: PublicKey, threadPubkey: PublicKey, instruction: TransactionInstruction): Promise<TransactionInstruction>;
    /**
     * Remove an instruction from a thread.
     *
     * @param authority The authority (owner) of the thread.
     * @param threadPubkey thread to remove instruction from.
     * @param index instruction index to be removed.
     */
    threadInstructionRemove(authority: PublicKey, threadPubkey: PublicKey, index: number): Promise<TransactionInstruction>;
    /**
     * Get Crate Info.
     *
     */
    getCrateInfo(): Promise<TransactionInstruction>;
}
export default ClockworkProvider;
